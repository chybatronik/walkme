// Generated by CoffeeScript 1.6.2
(function() {
  var LoginView, NavigationView, User, login, main, send_content_script, user,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    _this = this;

  User = (function() {
    function User() {}

    User.prototype.set = function(data) {
      var _this = this;
      this.token = data.token;
      this.email = data.email;
      console.log("asdadasdads");
      return chrome.storage.sync.set({
        'user': JSON.stringify({
          token: data.token,
          email: data.email
        })
      }, function() {
        return console.log('SAVE user');
      });
    };

    User.prototype.get = function() {
      var _this = this;
      return chrome.storage.sync.get('user', function(storage) {
        var loginview, stored;
        console.log("get user", storage);
        if (!(__indexOf.call(storage, 'user') >= 0)) {
          return loginview = new LoginView();
        } else {
          stored = JSON.parse(storage.user);
          console.log(stored);
          _this.token = stored.token;
          _this.email = stored.email;
          return main();
        }
      });
    };

    User.prototype["delete"] = function() {
      var _this = this;
      return chrome.storage.sync.set({
        'user': null
      }, function() {
        return console.log('delete user');
      });
    };

    return User;

  })();

  user = new User;

  main = function() {
    var navigateview;
    $('.main').empty();
    return navigateview = new NavigationView();
  };

  login = function() {
    return user.get();
  };

  LoginView = Backbone.View.extend({
    template: _.template($('#login-form').html()),
    initialize: function() {
      _.bindAll(this);
      this.render();
      return console.log("initialize LoginView", user.token);
    },
    events: {
      "click #submit": "get_token"
    },
    get_token: function(evt) {
      evt.preventDefault();
      return $.ajax({
        url: 'http://walkme.aws.af.cm/api/v1/tokens.json',
        type: "POST",
        dataType: "json",
        data: {
          email: $('input.email').val(),
          password: $('input.password').val()
        },
        success: function(data, status, response) {
          /*token = data.token
          email = data.email
          */
          user.set(data);
          return main();
        }
      });
    },
    render: function() {
      this.$el.html(this.template());
      return $('.main').empty().append(this.el);
    }
  });

  /*CollectionStepView = Backbone.View.extend(
    template: _.template($('#collection_step_view').html())
  
    initialize:->   
      _.bindAll @
      @.render()
      console.log "initialize CollectionStepView"
  
    render:->
      collection = ['asd', 'asdasd', 'asdasdasd']
      #this.$el.html(this.template());
      this.$el.append( this.template() );
      $('#workspace-panel').empty().append(this.el)
  )
  */


  NavigationView = Backbone.View.extend({
    template: _.template($('#navigation_view').html()),
    initialize: function() {
      _.bindAll(this);
      this.render();
      return console.log("initialize NavigationView", user.token);
    },
    events: {
      "click #help": "help",
      "click #workspace": "workspace",
      "click #setting": "setting",
      "click #publish": "publish",
      "click #logout": "logout",
      "click #start": "start",
      "click #stop": "stop",
      "click #play": "play",
      "click #clear_data": "clear_data"
    },
    start: function(ev) {
      ev.preventDefault();
      return send_content_script("start");
    },
    stop: function(ev) {
      ev.preventDefault();
      return send_content_script("stop");
    },
    play: function(ev) {
      var _this = this;
      ev.preventDefault();
      return chrome.storage.sync.get('tasks', function(storage) {
        var stored;
        console.log("get tasks", storage);
        stored = JSON.parse(storage.tasks);
        console.log("get length", stored.length);
        return send_content_script("play", storage.tasks);
      });
    },
    clear_data: function(ev) {
      var _this = this;
      ev.preventDefault();
      return chrome.storage.sync.set({
        'tasks': JSON.stringify([])
      }, function() {
        console.log('clear_data');
        return _this.render();
      });
    },
    help: function(ev) {
      return ev.preventDefault();
    },
    workspace: function(ev) {
      return console.log("workspace", ev.target, $(ev.target).attr('id'));
    },
    setting: function(ev) {
      return console.log("setting", ev.target, $(ev.target).attr('id'));
    },
    publish: function(ev) {
      return console.log("publish", ev.target, $(ev.target).attr('id'));
    },
    logout: function(ev) {
      console.log("logout", ev.target, $(ev.target).attr('id'));
      user["delete"]();
      $('.navigation').empty();
      return login();
    },
    render: function() {
      var _this = this;
      return chrome.storage.sync.get('tasks', function(storage) {
        var stored;
        console.log("get tasks", storage);
        if (__indexOf.call(storage, 'tasks') >= 0) {
          stored = JSON.parse(storage.tasks);
          console.log("get length", stored.length);
        } else {
          stored = [];
        }
        _this.$el.html(_this.template({
          name: user.email,
          tasks: stored
        }));
        return $('.navigation').empty().append(_this.el);
      });
    }
  });

  send_content_script = function(action, stored) {
    if (stored == null) {
      stored = null;
    }
    return chrome.tabs.query({
      "status": "complete",
      "windowId": chrome.windows.WINDOW_ID_CURRENT,
      "active": true
    }, function(tabs) {
      console.log(JSON.stringify(tabs[0]));
      console.log(tabs[0].id);
      if (stored) {
        return chrome.tabs.sendMessage(tabs[0].id, {
          action: action,
          stored: stored
        });
      } else {
        return chrome.tabs.sendMessage(tabs[0].id, {
          action: action
        });
      }
    });
  };

  $(window).load(login);

}).call(this);
